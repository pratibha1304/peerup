rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper: is the authed user a participant in the match?
    function isParticipant(matchId) {
      return request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.participants;
    }

    // --- USERS ---
    // Users can read all profiles (needed for matching) and update their own profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      // Allow creation during signup
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // --- CHAT ---
    match /chats/{chatId} {
      // Allow any authenticated user to read/write chats (we can tighten this later if needed)
      allow read, write: if request.auth != null;
      
      // --- MESSAGES ---
      match /messages/{messageId} {
        // Users can read/write messages if authenticated
        allow read, write: if request.auth != null;
      }
    }

    // --- CALL ROOMS ---
    // Users can only create a call room where they are the caller.
    // They can only read or update a room if they are EITHER the caller OR the callee.
    match /callRooms/{roomId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;

      // --- OFFER CANDIDATES ---
      // Users can only read/write candidates if they are part of the parent call.
      match /offerCandidates/{candidateId} {
        allow read, write: if request.auth != null;
      }

      // --- ANSWER CANDIDATES ---
      match /answerCandidates/{candidateId} {
        allow read, write: if request.auth != null;
      }
    }

    // --- SCHEDULE REQUESTS ---
    match /scheduleRequests/{requestId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requesterId;
      allow read: if request.auth != null;
      
      // Allow update if you are the receiver (to confirm/decline)
      // OR if you are the requester (to cancel, i.e., set status to 'declined')
      allow update: if request.auth != null && ((request.auth.uid == resource.data.receiverId && request.resource.data.status != 'pending') ||
                                                (request.auth.uid == resource.data.requesterId && request.resource.data.status == 'declined'));
    }

    // --- FEEDBACK ---
    // Write-only client collection for global feedback
    match /feedback/{feedbackId} {
      // Any authenticated user can create feedback tied to their UID
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
      // No client reads/updates/deletes
      allow read, update, delete: if false;
    }

    // --- MATCHES / GOALS / TASKS ---
    match /matches/{matchId} {
      // Basic read access for participants - check directly without helper to avoid circular dependency
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      // Allow creating a match if the author is one of the participants
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      // Allow update if user is a participant and the participants array remains the same
      allow update: if request.auth != null && isParticipant(matchId) && request.resource.data.participants == resource.data.participants;

      // Goals under a match
      match /goals/{goalId} {
        // Participants can read/create/update goals
        allow read, create, update: if request.auth != null && isParticipant(matchId);
      }

      // Tasks under a goal
      match /goals/{goalId}/tasks/{taskId} {
        // Participants can read/create tasks
        allow read, create: if request.auth != null && isParticipant(matchId);

        // Update allowed if participant AND (buddy match OR this user is mentee)
        allow update: if request.auth != null && isParticipant(matchId) && (
          get(/databases/$(database)/documents/matches/$(matchId)).data.matchType == 'buddy' ||
          request.auth.uid == get(/databases/$(database)/documents/matches/$(matchId)).data.menteeId
        );
      }
    }

    // --- MATCH REQUESTS ---
    match /matchRequests/{requestId} {
      // Create allowed only by requester for themselves
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requesterId;
      // Read allowed for either party
      allow read: if request.auth != null && (request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.receiverId);
      // Update allowed only by receiver to change status
      allow update: if request.auth != null && request.auth.uid == resource.data.receiverId;
      // No deletes from client
      allow delete: if false;
    }
  }
}

